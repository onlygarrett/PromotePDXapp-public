version: "3.8"

services:
  db:
    container_name: db
    image: postgres:latest
    env_file:
      - ./.env.dev
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    # entrypoint: ["./entrypointlocal.sh"]
    command: python3 manage.py runserver 0.0.0.0:8000
    env_file:
      - ./.env.dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
    depends_on:
      - db
      - redis

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm start
    env_file:
      - ./.env.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend
      - node_modules:/app/node_modules

  celery:
    container_name: celery
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: ["celery", "-A", "promotepdxapp", "worker", "--loglevel=info"]
    env_file:
      - ./.env.dev
    volumes:
      - ./backend:/app/backend
    depends_on:
      - backend
      - db
      - redis

  celery-beat:
    container_name: celery-beat
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint:
      [
        "celery",
        "-A",
        "promotepdxapp",
        "beat",
        "--loglevel=info",
        "--scheduler=django_celery_beat.schedulers:DatabaseScheduler",
      ]
    env_file:
      - ./.env.dev
    volumes:
      - ./backend:/app/backend
    depends_on:
      - backend
      - db
      - redis

  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  db_data:
  node_modules:
  redis_data:

